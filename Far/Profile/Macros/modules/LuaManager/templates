return {
  Macro = {
    moon = {
      c = "(key) -> true",
      a = "->",
    },
    lua  = {
      c = "function(key) return true end",
      a = "function() end",
    },
  },
  Event = {
    moon = {
      ExitFAR = {
        c = [=[
(bReloadMacro) -> true
--bReloadMacro: boolean (Reload macro/Unload plugin, exit Far)
]=],
        a = [=[
(bReloadMacro) ->
--bReloadMacro: boolean (Reload macro/Unload plugin, exit Far)
]=],
      },
      DialogEvent = {
        c = [=[
(Event,tFarDialogEvent) -> true
-- tFarDialogEvent:{hDlg,Msg,Param1,Param2}
]=],
        a = [=[
(Event,tFarDialogEvent) -> --integer
-- tFarDialogEvent:{hDlg,Msg,Param1,Param2}
]=],
      },
      EditorEvent = {
        c = [=[
(EditorID,Event,Param) -> true
--Event: integer=(EE_CHANGE|EE_GOTFOCUS|EE_KILLFOCUS|EE_READ|EE_REDRAW|EE_SAVE|EE_CLOSE)
--Param: if Event==EE_CHANGE then {iType,iStringNumber}
--       elseif Event==EE_SAVE then {sFileName,sFileEOL,iCodePage}
--       else integer
]=],
        a = [=[
(EditorID,Event,Param)-> --integer
--Event: integer=(EE_CHANGE|EE_GOTFOCUS|EE_KILLFOCUS|EE_READ|EE_REDRAW|EE_SAVE|EE_CLOSE)
--Param: if Event==EE_CHANGE then {iType,iStringNumber}
--       elseif Event==EE_SAVE then {sFileName,sFileEOL,iCodePage}
--       else integer
]=],
      },
      EditorInput = {
        c = [=[
(tInputRecord) -> true
--tInputRecord = {
--  EventType:(KEY_EVENT|MOUSE_EVENT|WINDOW_BUFFER_SIZE_EVENT|MENU_EVENT|FOCUS_EVENT),
--  if EventType is KEY_EVENT: bKeyDown,iRepeatCount,iVirtualKeyCode,
--                             iVirtualScanCode,sUnicodeChar,iControlKeyState
--  if EventType is MOUSE_EVENT: iMousePositionX,iMousePositionY,iButtonState,
--                               iControlKeyState,iEventFlags
--  if EventType is WINDOW_BUFFER_SIZE_EVENT: iSizeX,iSizeY
--  if EventType is MENU_EVENT: iCommandId
--  if EventType is FOCUS_EVENT: bSetFocus
--}
]=],
        a = [=[
(tInputRecord) -> true
--tInputRecord = {
--  EventType:(KEY_EVENT|MOUSE_EVENT|WINDOW_BUFFER_SIZE_EVENT|MENU_EVENT|FOCUS_EVENT),
--  if EventType is KEY_EVENT: bKeyDown,iRepeatCount,iVirtualKeyCode,
--                             iVirtualScanCode,sUnicodeChar,iControlKeyState
--  if EventType is MOUSE_EVENT: iMousePositionX,iMousePositionY,iButtonState,
--                               iControlKeyState,iEventFlags
--  if EventType is WINDOW_BUFFER_SIZE_EVENT: iSizeX,iSizeY
--  if EventType is MENU_EVENT: iCommandId
--  if EventType is FOCUS_EVENT: bSetFocus
--}
]=],
      },
      ConsoleInput = {
        c = [=[
(tInputRecord,Flags) -> true
--tInputRecord = {
--  EventType:(KEY_EVENT|MOUSE_EVENT|WINDOW_BUFFER_SIZE_EVENT|MENU_EVENT|FOCUS_EVENT),
--  if EventType is KEY_EVENT: bKeyDown,iRepeatCount,iVirtualKeyCode,
--                             iVirtualScanCode,sUnicodeChar,iControlKeyState
--  if EventType is MOUSE_EVENT: iMousePositionX,iMousePositionY,iButtonState,
--                               iControlKeyState,iEventFlags
--  if EventType is WINDOW_BUFFER_SIZE_EVENT: iSizeX,iSizeY
--  if EventType is MENU_EVENT: iCommandId
--  if EventType is FOCUS_EVENT: bSetFocus
--}
--Flags:        (PCIF_FROMMAIN|PCIF_NONE)
]=],
        a = [=[
(tInputRecord,Flags) -> 0--/1/tInputRecord
--tInputRecord: {
--  EventType:(KEY_EVENT|MOUSE_EVENT|WINDOW_BUFFER_SIZE_EVENT|MENU_EVENT|FOCUS_EVENT),
--  if EventType is KEY_EVENT: bKeyDown,iRepeatCount,iVirtualKeyCode,
--                             iVirtualScanCode,sUnicodeChar,iControlKeyState
--  if EventType is MOUSE_EVENT: iMousePositionX,iMousePositionY,iButtonState,
--                               iControlKeyState,iEventFlags
--  if EventType is WINDOW_BUFFER_SIZE_EVENT: iSizeX,iSizeY
--  if EventType is MENU_EVENT: iCommandId
--  if EventType is FOCUS_EVENT: bSetFocus
--}
--Flags:        (PCIF_FROMMAIN|PCIF_NONE)
]=],
      },
      ViewerEvent = {
        c = [=[
(ViewerID,Event,Param) -> true
--ViewerID: integer
--Event   : integer=(VE_READ|VE_GOTFOCUS|VE_KILLFOCUS|VE_CLOSE)
--Param   : nil
]=],
        a = [=[
(ViewerID,Event,Param) -> --integer
--ViewerID: integer
--Event   : integer=(VE_READ|VE_GOTFOCUS|VE_KILLFOCUS|VE_CLOSE)
--Param   : nil
]=],
      },
    },
    lua  = {
      ExitFAR = {
        c = [=[
function(bReloadMacro) return true end
--bReloadMacro: boolean (Reload macro/Unload plugin, exit Far)
]=],
        a = [=[
function(bReloadMacro) end
--bReloadMacro: boolean (Reload macro/Unload plugin, exit Far)
]=],
      },
      DialogEvent = {
        c = [=[
function(Event,tFarDialogEvent) return true end
-- tFarDialogEvent:{hDlg,Msg,Param1,Param2}
]=],
        a = [=[
function(Event,tFarDialogEvent) return --[[integer--]] end
-- tFarDialogEvent:{hDlg,Msg,Param1,Param2}
]=],
      },
      EditorEvent = {
        c = [=[
function(EditorID,Event,Param) return true end
--Event: integer=(EE_CHANGE|EE_GOTFOCUS|EE_KILLFOCUS|EE_READ|EE_REDRAW|EE_SAVE|EE_CLOSE)
--Param: if Event==EE_CHANGE then {iType,iStringNumber}
--       elseif Event==EE_SAVE then {sFileName,sFileEOL,iCodePage}
--       else integer
]=],
        a = [=[
function(EditorID,Event,Param) return --[[integer--]] end
--Event: integer=(EE_CHANGE|EE_GOTFOCUS|EE_KILLFOCUS|EE_READ|EE_REDRAW|EE_SAVE|EE_CLOSE)
--Param: if Event==EE_CHANGE then {iType,iStringNumber}
--       elseif Event==EE_SAVE then {sFileName,sFileEOL,iCodePage}
--       else integer
]=],
      },
      EditorInput = {
        c = [=[
function(tInputRecord) return true end
--tInputRecord = {
--  EventType:(KEY_EVENT|MOUSE_EVENT|WINDOW_BUFFER_SIZE_EVENT|MENU_EVENT|FOCUS_EVENT),
--  if EventType is KEY_EVENT: bKeyDown,iRepeatCount,iVirtualKeyCode,
--                             iVirtualScanCode,sUnicodeChar,iControlKeyState
--  if EventType is MOUSE_EVENT: iMousePositionX,iMousePositionY,iButtonState,
--                               iControlKeyState,iEventFlags
--  if EventType is WINDOW_BUFFER_SIZE_EVENT: iSizeX,iSizeY
--  if EventType is MENU_EVENT: iCommandId
--  if EventType is FOCUS_EVENT: bSetFocus
--}
]=],
        a = [=[
function(tInputRecord) return true end
--tInputRecord = {
--  EventType:(KEY_EVENT|MOUSE_EVENT|WINDOW_BUFFER_SIZE_EVENT|MENU_EVENT|FOCUS_EVENT),
--  if EventType is KEY_EVENT: bKeyDown,iRepeatCount,iVirtualKeyCode,
--                             iVirtualScanCode,sUnicodeChar,iControlKeyState
--  if EventType is MOUSE_EVENT: iMousePositionX,iMousePositionY,iButtonState,
--                               iControlKeyState,iEventFlags
--  if EventType is WINDOW_BUFFER_SIZE_EVENT: iSizeX,iSizeY
--  if EventType is MENU_EVENT: iCommandId
--  if EventType is FOCUS_EVENT: bSetFocus
--}
]=],
      },
      ConsoleInput = {
        c = [=[
function(tInputRecord,Flags) return true end
--tInputRecord = {
--  EventType:(KEY_EVENT|MOUSE_EVENT|WINDOW_BUFFER_SIZE_EVENT|MENU_EVENT|FOCUS_EVENT),
--  if EventType is KEY_EVENT: bKeyDown,iRepeatCount,iVirtualKeyCode,
--                             iVirtualScanCode,sUnicodeChar,iControlKeyState
--  if EventType is MOUSE_EVENT: iMousePositionX,iMousePositionY,iButtonState,
--                               iControlKeyState,iEventFlags
--  if EventType is WINDOW_BUFFER_SIZE_EVENT: iSizeX,iSizeY
--  if EventType is MENU_EVENT: iCommandId
--  if EventType is FOCUS_EVENT: bSetFocus
--}
--Flags:        (PCIF_FROMMAIN|PCIF_NONE)
]=],
        a = [=[
function(tInputRecord,Flags) return 0--[[/1/tInputRecord]] end
--tInputRecord = {
--  EventType:(KEY_EVENT|MOUSE_EVENT|WINDOW_BUFFER_SIZE_EVENT|MENU_EVENT|FOCUS_EVENT),
--  if EventType is KEY_EVENT: bKeyDown,iRepeatCount,iVirtualKeyCode,
--                             iVirtualScanCode,sUnicodeChar,iControlKeyState
--  if EventType is MOUSE_EVENT: iMousePositionX,iMousePositionY,iButtonState,
--                               iControlKeyState,iEventFlags
--  if EventType is WINDOW_BUFFER_SIZE_EVENT: iSizeX,iSizeY
--  if EventType is MENU_EVENT: iCommandId
--  if EventType is FOCUS_EVENT: bSetFocus
--}
--Flags:        (PCIF_FROMMAIN|PCIF_NONE)
]=],
      },
      ViewerEvent = {
        c = [=[
function(ViewerID,Event,Param) return true end
--ViewerID: integer
--Event   : integer=(VE_READ|VE_GOTFOCUS|VE_KILLFOCUS|VE_CLOSE)
--Param   : nil
]=],
        a = [=[
function(ViewerID,Event,Param) return --[[integer--]] end
--ViewerID: integer
--Event   : integer=(VE_READ|VE_GOTFOCUS|VE_KILLFOCUS|VE_CLOSE)
--Param   : nil
]=],
      },
    },
  },
  MenuItem = {
    moon = {
      t = '(menu,area)->""',
      a = '(OpenFrom,Item)->',
    },
    lua  = {
      t = 'function(menu,area) return"" end',
      a = 'function(OpenFrom,Item) end',
    },
  },
  CommandLine = {
    moon = {
      a = "(prefix,text)->",
    },
    lua  = {
      a = "function(prefix,text) end",
    },
  },
  PanelModule = {
    moon = {
      Analyse = [=[
(tAnalyseInfo)-> --[[any type--]]
--tAnalyseInfo = {
--  FileName: string (UTF-8)
--  Buffer:   string
--  OpMode:   flags=[OPM_SILENT,OPM_FIND,OPM_VIEW,OPM_QUICKVIEW,OPM_EDIT,
--                   OPM_DESCR,OPM_TOPLEVEL,OPM_PGDN,OPM_COMMANDS,OPM_NONE]
--}
]=],
      ClosePanel = [=[
(object,handle)->
--object: plugin object
--handle: panel handle
]=],
      Compare = [=[
(object,handle,PanelItem1,PanelItem2,Mode)-> --[[-1/0/1/-2--]]
--object:     plugin object
--handle:     panel handle
--PanelItem1: tPluginPanelItem
--PanelItem2: tPluginPanelItem
--Mode:       integer=(SM_DEFAULT|SM_UNSORTED|SM_NAME|SM_EXT|SM_MTIME|SM_CTIME|
--                     SM_ATIME|SM_SIZE|SM_DESCR|SM_OWNER|SM_COMPRESSEDSIZE|
--                     SM_NUMLINKS|SM_NUMSTREAMS|SM_STREAMSSIZE|SM_FULLNAME|SM_CHTIME)
--  tPluginPanelItem:{
--    LastWriteTime:     number(ms+01/01/1601)
--    LastAccessTime:    number(ms+01/01/1601)
--    CreationTime:      number(ms+01/01/1601)
--    ChangeTime:        number(ms+01/01/1601)
--    FileSize:          number
--    AllocationSize:    number
--    FileName:          string
--    AlternateFileName: string
--    FileAttributes:    string=[a,c,d,e,h,o,p,r,s,t]
--    Flags:             flags=(PPIF_PROCESSDESCR|PPIF_SELECTED|PPIF_NONE)
--    NumberOfLinks:     integer
--    CRC32:             integer
--    Description:       string, or nil
--    Owner:             string, or nil
--    CustomColumnData:  table, or nil
--    UserData:          any type
--  }
]=],
      DeleteFiles = [=[
(object,handle,PanelItems,OpMode)-> --[[boolean--]]
--object:     plugin object
--handle:     panel handle
--PanelItems: {tPluginPanelItem*n}
--OpMode:     flags=[OPM_SILENT,OPM_FIND,OPM_VIEW,OPM_QUICKVIEW,OPM_EDIT,
--                   OPM_DESCR,OPM_TOPLEVEL,OPM_PGDN,OPM_COMMANDS,OPM_NONE]
--  tPluginPanelItem:{
--    LastWriteTime:     number(ms+01/01/1601)
--    LastAccessTime:    number(ms+01/01/1601)
--    CreationTime:      number(ms+01/01/1601)
--    ChangeTime:        number(ms+01/01/1601)
--    FileSize:          number
--    AllocationSize:    number
--    FileName:          string
--    AlternateFileName: string
--    FileAttributes:    string=[a,c,d,e,h,o,p,r,s,t]
--    Flags:             flags=(PPIF_PROCESSDESCR|PPIF_SELECTED|PPIF_NONE)
--    NumberOfLinks:     integer
--    CRC32:             integer
--    Description:       string, or nil
--    Owner:             string, or nil
--    CustomColumnData:  table, or nil
--    UserData:          any type
--  }
]=],
      GetFiles = [=[
(object,handle,PanelItems,Move,DestPath,OpMode)-> --[[1/0/-1[,newDestPath:string]--]]
--object:     plugin object
--handle:     panel handle
--PanelItems: {tPluginPanelItem*n}
--Move:       boolean
--DestPath:   string
--OpMode:     flags=[OPM_SILENT,OPM_FIND,OPM_VIEW,OPM_QUICKVIEW,OPM_EDIT,
--                   OPM_DESCR,OPM_TOPLEVEL,OPM_PGDN,OPM_COMMANDS,OPM_NONE]
--  tPluginPanelItem:{
--    LastWriteTime:     number(ms+01/01/1601)
--    LastAccessTime:    number(ms+01/01/1601)
--    CreationTime:      number(ms+01/01/1601)
--    ChangeTime:        number(ms+01/01/1601)
--    FileSize:          number
--    AllocationSize:    number
--    FileName:          string
--    AlternateFileName: string
--    FileAttributes:    string=[a,c,d,e,h,o,p,r,s,t]
--    Flags:             flags=(PPIF_PROCESSDESCR|PPIF_SELECTED|PPIF_NONE)
--    NumberOfLinks:     integer
--    CRC32:             integer
--    Description:       string, or nil
--    Owner:             string, or nil
--    CustomColumnData:  table, or nil
--    UserData:          any type
--  }
]=],
      GetFindData = [=[
(object,handle,OpMode)-> --[[{tPluginPanelItem*n}--]]
--object: plugin object
--handle: panel handle
--OpMode: flags=[OPM_SILENT,OPM_FIND,OPM_VIEW,OPM_QUICKVIEW,OPM_EDIT,
--                   OPM_DESCR,OPM_TOPLEVEL,OPM_PGDN,OPM_COMMANDS,OPM_NONE]
--  tPluginPanelItem:{
--    LastWriteTime:     number(ms+01/01/1601)
--    LastAccessTime:    number(ms+01/01/1601)
--    CreationTime:      number(ms+01/01/1601)
--    ChangeTime:        number(ms+01/01/1601)
--    FileSize:          number
--    AllocationSize:    number
--    FileName:          string
--    AlternateFileName: string
--    FileAttributes:    string=[a,c,d,e,h,o,p,r,s,t]
--    Flags:             flags=(PPIF_PROCESSDESCR|PPIF_SELECTED|PPIF_NONE)
--    NumberOfLinks:     integer
--    CRC32:             integer
--    Description:       string, or nil
--    Owner:             string, or nil
--    CustomColumnData:  table, or nil
--    UserData:          any type
--  }
]=],
      GetOpenPanelInfo = [=[
(object,handle)-> --[[OPInfo--]]
--object: plugin object
--handle: panel handle
--  OPInfo:{
--    fields of OPInfo:
--      Flags:            [OPIF_DISABLEFILTER,OPIF_DISABLESORTGROUPS,OPIF_DISABLEHIGHLIGHTIN,
--                         OPIF_ADDDOTS,OPIF_RAWSELECTION,OPIF_REALNAMES,OPIF_SHOWNAMESONLY,
--                         OPIF_SHOWRIGHTALIGNNAMES,OPIF_SHOWPRESERVECASE,OPIF_COMPAREFATTIME,
--                         OPIF_EXTERNALGET,OPIF_EXTERNALPUT,OPIF_EXTERNALDELETE,OPIF_EXTERNALMKDIR,
--                         OPIF_USEATTRHIGHLIGHTING,OPIF_USECRC32,OPIF_USEFREESIZE,OPIF_SHORTCUT,OPIF_NONE]
--      HostFile:         string
--      CurDir:           string
--      Format:           string
--      PanelTitle:       string
--      InfoLines:        {tInfoLine*InfoLinesNumber}
--      InfoLinesNumber:  integer
--      DescrFiles:       {string*n}
--      PanelModesArray:  {tPanelMode*PanelModesNumber}
--      PanelModesNumber: integer
--      StartPanelMode:   integer
--      StartSortMode:    integer
--      StartSortOrder:   (0|1)
--      KeyBar:           {tKeyBarLabel}
--      ShortcutData:     string
--      FreeSize:         number
--  }
--  tInfoLine:{
--    Text:  string
--    Data:  string
--    Flags: [IPLFLAGS_SEPARATOR]
--  }
--  tPanelMode:{
--    ColumnTypes:        string
--    ColumnWidths:       string
--    StatusColumnTypes:  string
--    StatusColumnWidths: string
--    ColumnTitles:       {string*n}
--    Flags:              [PMFLAGS_FULLSCREEN,PMFLAGS_DETAILEDSTATUS,PMFLAGS_ALIGNEXTENSIONS,PMFLAGS_CASECONVERSION]
--  }
--  tKeyBarLabel:{
--    VirtualKeyCode:  integer
--    ControlKeyState: [CAPSLOCK_ON,ENHANCED_KEY,LEFT_ALT_PRESSED,LEFT_CTRL_PRESSED,NUMLOCK_ON,
--                      RIGHT_ALT_PRESSED,RIGHT_CTRL_PRESSED,SCROLLLOCK_ON,SHIFT_PRESSED]
--    Text:            string
--    LongText:        string
--  }
]=],
      MakeDirectory = [=[
(object,handle,Name,OpMode)-> --[[1/0/-1[,NewName:string]--]]
--object: plugin object
--handle: panel handle
--Name:   string
--OpMode: flags=[OPM_SILENT,OPM_FIND,OPM_VIEW,OPM_QUICKVIEW,OPM_EDIT,
--                   OPM_DESCR,OPM_TOPLEVEL,OPM_PGDN,OPM_COMMANDS,OPM_NONE]
]=],
      Open = [=[
(OpenFrom,Guid,Item)-> --[[result--]]
--result: if OpenFrom == OPEN_FROMMACRO: (string|nil|boolean|number|int64|binary)*N
--        elseif OpenFrom == OPEN_ANALYSE: -1/any type
--        else: any type
--OpenFrom: (OPEN_LEFTDISKMENU|OPEN_PLUGINSMENU|OPEN_FINDLIST|OPEN_SHORTCUT|
--           OPEN_COMMANDLINE|OPEN_EDITOR|OPEN_VIEWER|OPEN_FILEPANEL|OPEN_DIALOG|
--           OPEN_ANALYSE|OPEN_RIGHTDISKMENU|OPEN_FROMMACRO|OPEN_LUAMACRO)
--Guid:     string
--Item:     if OpenFrom == OPEN_FROMMACRO: {(string|nil|boolean|number|int64|binary)*n,n:integer}
--          elseif OpenFrom == OPEN_COMMANDLINE: string
--          elseif OpenFrom == OPEN_SHORTCUT: {
--                                              HostFile:     string
--                                              ShortcutData: string
--                                              Flags:        [FOSF_ACTIVE,FOSF_NONE]
--                                            }
--          elseif OpenFrom == OPEN_DIALOG: {hDlg: userdata}
--          elseif OpenFrom == OPEN_ANALYSE: tAnalyseInfo
--          else: integer
--  tAnalyseInfo = {
--    FileName: string (UTF-8)
--    Buffer:   string
--    OpMode:   flags=[OPM_SILENT,OPM_FIND,OPM_VIEW,OPM_QUICKVIEW,OPM_EDIT,
--                     OPM_DESCR,OPM_TOPLEVEL,OPM_PGDN,OPM_COMMANDS,OPM_NONE]
--  }
]=],
      ProcessHostFile = [=[
(object,handle,Items,OpMode)-> --[[boolean--]]
--object: plugin object
--handle: panel handle
--Items:  {tPluginPanelItem*n}
--OpMode: flags=[OPM_SILENT,OPM_FIND,OPM_VIEW,OPM_QUICKVIEW,OPM_EDIT,
--               OPM_DESCR,OPM_TOPLEVEL,OPM_PGDN,OPM_COMMANDS,OPM_NONE]
--  tPluginPanelItem:{
--    LastWriteTime:     number(ms+01/01/1601)
--    LastAccessTime:    number(ms+01/01/1601)
--    CreationTime:      number(ms+01/01/1601)
--    ChangeTime:        number(ms+01/01/1601)
--    FileSize:          number
--    AllocationSize:    number
--    FileName:          string
--    AlternateFileName: string
--    FileAttributes:    string=[a,c,d,e,h,o,p,r,s,t]
--    Flags:             flags=(PPIF_PROCESSDESCR|PPIF_SELECTED|PPIF_NONE)
--    NumberOfLinks:     integer
--    CRC32:             integer
--    Description:       string, or nil
--    Owner:             string, or nil
--    CustomColumnData:  table, or nil
--    UserData:          any type
--  }
]=],
      ProcessPanelEvent = [=[
(object,handle,Event,Param)-> --[[boolean--]]
--object: plugin object
--handle: panel handle
--Event:  integer=(FE_CHANGEVIEWMODE|FE_REDRAW|FE_IDLE|FE_CLOSE|FE_BREAK|
--                 FE_COMMAND|FE_KILLFOCUS|FE_GOTFOCUS|FE_CHANGESORTPARAMS)
--Param:  if Event in (FE_CHANGEVIEWMODE|FE_COMMAND) then string else nil
]=],
      ProcessPanelInput = [=[
(object,handle,rec)-> --[[boolean--]]
--object: plugin object
--handle: panel handle
--rec:    tInputRecord: {
--                      EventType:(KEY_EVENT|MOUSE_EVENT|WINDOW_BUFFER_SIZE_EVENT|MENU_EVENT|FOCUS_EVENT),
--                      if EventType is KEY_EVENT: bKeyDown,iRepeatCount,iVirtualKeyCode,
--                                                 iVirtualScanCode,sUnicodeChar,iControlKeyState
--                      if EventType is MOUSE_EVENT: iMousePositionX,iMousePositionY,iButtonState,
--                                                   iControlKeyState,iEventFlags
--                      if EventType is WINDOW_BUFFER_SIZE_EVENT: iSizeX,iSizeY
--                      if EventType is MENU_EVENT: iCommandId
--                      if EventType is FOCUS_EVENT: bSetFocus
--        }

]=],
      PutFiles = [=[
(object,handle,Items,Move,SrcPath,OpMode)-> --[[1/2/0/-1--]]
--object:     plugin object
--handle:     panel handle
--PanelItems: {tPluginPanelItem*n}
--Move:       boolean
--SrcPath:    string
--OpMode:     flags=[OPM_SILENT,OPM_FIND,OPM_VIEW,OPM_QUICKVIEW,OPM_EDIT,
--                   OPM_DESCR,OPM_TOPLEVEL,OPM_PGDN,OPM_COMMANDS,OPM_NONE]
--  tPluginPanelItem:{
--    LastWriteTime:      number(ms+01/01/1601)
--    LastAccessTime:     number(ms+01/01/1601)
--    CreationTime:       number(ms+01/01/1601)
--    ChangeTime:         number(ms+01/01/1601)
--    FileSize:           number
--    AllocationSize:     number
--    FileName:           string
--    AlternateFileName:  string
--    FileAttributes:     string=[a,c,d,e,h,o,p,r,s,t]
--    Flags:              flags=(PPIF_PROCESSDESCR|PPIF_SELECTED|PPIF_NONE)
--    NumberOfLinks:      integer
--    CRC32:              integer
--    Description:        string, or nil
--    Owner:              string, or nil
--    CustomColumnData:   table, or nil
--    UserData:           any type
--  }
]=],
      SetDirectory = [=[
(object,handle,Dir,OpMode)-> --[[boolean--]]
--object: plugin object
--handle: panel handle
--Dir:    string
--OpMode: flags=[OPM_SILENT,OPM_FIND,OPM_VIEW,OPM_QUICKVIEW,OPM_EDIT,
--               OPM_DESCR,OPM_TOPLEVEL,OPM_PGDN,OPM_COMMANDS,OPM_NONE]
]=],
      SetFindList = [=[
(object,handle,Items)-> --[[boolean--]]
--object: plugin object
--handle: panel handle
--Items:  {tPluginPanelItem*n}
--  tPluginPanelItem:{
--    LastWriteTime:      number(ms+01/01/1601)
--    LastAccessTime:     number(ms+01/01/1601)
--    CreationTime:       number(ms+01/01/1601)
--    ChangeTime:         number(ms+01/01/1601)
--    FileSize:           number
--    AllocationSize:     number
--    FileName:           string
--    AlternateFileName:  string
--    FileAttributes:     string=[a,c,d,e,h,o,p,r,s,t]
--    Flags:              flags=(PPIF_PROCESSDESCR|PPIF_SELECTED|PPIF_NONE)
--    NumberOfLinks:      integer
--    CRC32:              integer
--    Description:        string, or nil
--    Owner:              string, or nil
--    CustomColumnData:   table, or nil
--    UserData:           any type
--  }
]=],
    },
    lua  = {
      Analyse = [=[
function(tAnalyseInfo) return --[[any type--]] end
--tAnalyseInfo = {
--  FileName: string (UTF-8)
--  Buffer:   string
--  OpMode:   flags=[OPM_SILENT,OPM_FIND,OPM_VIEW,OPM_QUICKVIEW,OPM_EDIT,
--                   OPM_DESCR,OPM_TOPLEVEL,OPM_PGDN,OPM_COMMANDS,OPM_NONE]
--}
]=],
      ClosePanel = [=[
function(object,handle) end
--object: plugin object
--handle: panel handle
]=],
      Compare = [=[
function(object,handle,PanelItem1,PanelItem2,Mode) return --[[-1/0/1/-2--]] end
--object:     plugin object
--handle:     panel handle
--PanelItem1: tPluginPanelItem
--PanelItem2: tPluginPanelItem
--Mode:       integer=(SM_DEFAULT|SM_UNSORTED|SM_NAME|SM_EXT|SM_MTIME|SM_CTIME|
--                     SM_ATIME|SM_SIZE|SM_DESCR|SM_OWNER|SM_COMPRESSEDSIZE|
--                     SM_NUMLINKS|SM_NUMSTREAMS|SM_STREAMSSIZE|SM_FULLNAME|SM_CHTIME)
--  tPluginPanelItem:{
--    LastWriteTime:     number(ms+01/01/1601)
--    LastAccessTime:    number(ms+01/01/1601)
--    CreationTime:      number(ms+01/01/1601)
--    ChangeTime:        number(ms+01/01/1601)
--    FileSize:          number
--    AllocationSize:    number
--    FileName:          string
--    AlternateFileName: string
--    FileAttributes:    string=[a,c,d,e,h,o,p,r,s,t]
--    Flags:             flags=(PPIF_PROCESSDESCR|PPIF_SELECTED|PPIF_NONE)
--    NumberOfLinks:     integer
--    CRC32:             integer
--    Description:       string, or nil
--    Owner:             string, or nil
--    CustomColumnData:  table, or nil
--    UserData:          any type
--  }
]=],
      DeleteFiles = [=[
function(object,handle,PanelItems,OpMode) return --[[boolean--]] end
--object:     plugin object
--handle:     panel handle
--PanelItems: {tPluginPanelItem*n}
--OpMode:     flags=[OPM_SILENT,OPM_FIND,OPM_VIEW,OPM_QUICKVIEW,OPM_EDIT,
--                   OPM_DESCR,OPM_TOPLEVEL,OPM_PGDN,OPM_COMMANDS,OPM_NONE]
--  tPluginPanelItem:{
--    LastWriteTime:     number(ms+01/01/1601)
--    LastAccessTime:    number(ms+01/01/1601)
--    CreationTime:      number(ms+01/01/1601)
--    ChangeTime:        number(ms+01/01/1601)
--    FileSize:          number
--    AllocationSize:    number
--    FileName:          string
--    AlternateFileName: string
--    FileAttributes:    string=[a,c,d,e,h,o,p,r,s,t]
--    Flags:             flags=(PPIF_PROCESSDESCR|PPIF_SELECTED|PPIF_NONE)
--    NumberOfLinks:     integer
--    CRC32:             integer
--    Description:       string, or nil
--    Owner:             string, or nil
--    CustomColumnData:  table, or nil
--    UserData:          any type
--  }
]=],
      GetFiles = [=[
function(object,handle,PanelItems,Move,DestPath,OpMode) return --[[1/0/-1[,newDestPath:string]--]] end
--object:     plugin object
--handle:     panel handle
--PanelItems: {tPluginPanelItem*n}
--Move:       boolean
--DestPath:   string
--OpMode:     flags=[OPM_SILENT,OPM_FIND,OPM_VIEW,OPM_QUICKVIEW,OPM_EDIT,
--                   OPM_DESCR,OPM_TOPLEVEL,OPM_PGDN,OPM_COMMANDS,OPM_NONE]
--  tPluginPanelItem:{
--    LastWriteTime:     number(ms+01/01/1601)
--    LastAccessTime:    number(ms+01/01/1601)
--    CreationTime:      number(ms+01/01/1601)
--    ChangeTime:        number(ms+01/01/1601)
--    FileSize:          number
--    AllocationSize:    number
--    FileName:          string
--    AlternateFileName: string
--    FileAttributes:    string=[a,c,d,e,h,o,p,r,s,t]
--    Flags:             flags=(PPIF_PROCESSDESCR|PPIF_SELECTED|PPIF_NONE)
--    NumberOfLinks:     integer
--    CRC32:             integer
--    Description:       string, or nil
--    Owner:             string, or nil
--    CustomColumnData:  table, or nil
--    UserData:          any type
--  }
]=],
      GetFindData = [=[
function(object,handle,OpMode) return --[[{tPluginPanelItem*n}--]] end
--object: plugin object
--handle: panel handle
--OpMode: flags=[OPM_SILENT,OPM_FIND,OPM_VIEW,OPM_QUICKVIEW,OPM_EDIT,
--                   OPM_DESCR,OPM_TOPLEVEL,OPM_PGDN,OPM_COMMANDS,OPM_NONE]
--  tPluginPanelItem:{
--    LastWriteTime:     number(ms+01/01/1601)
--    LastAccessTime:    number(ms+01/01/1601)
--    CreationTime:      number(ms+01/01/1601)
--    ChangeTime:        number(ms+01/01/1601)
--    FileSize:          number
--    AllocationSize:    number
--    FileName:          string
--    AlternateFileName: string
--    FileAttributes:    string=[a,c,d,e,h,o,p,r,s,t]
--    Flags:             flags=(PPIF_PROCESSDESCR|PPIF_SELECTED|PPIF_NONE)
--    NumberOfLinks:     integer
--    CRC32:             integer
--    Description:       string, or nil
--    Owner:             string, or nil
--    CustomColumnData:  table, or nil
--    UserData:          any type
--  }
]=],
      GetOpenPanelInfo = [=[
function(object,handle) return --[[OPInfo--]] end
--object: plugin object
--handle: panel handle
--  OPInfo:{
--    fields of OPInfo:
--      Flags:            [OPIF_DISABLEFILTER,OPIF_DISABLESORTGROUPS,OPIF_DISABLEHIGHLIGHTIN,
--                         OPIF_ADDDOTS,OPIF_RAWSELECTION,OPIF_REALNAMES,OPIF_SHOWNAMESONLY,
--                         OPIF_SHOWRIGHTALIGNNAMES,OPIF_SHOWPRESERVECASE,OPIF_COMPAREFATTIME,
--                         OPIF_EXTERNALGET,OPIF_EXTERNALPUT,OPIF_EXTERNALDELETE,OPIF_EXTERNALMKDIR,
--                         OPIF_USEATTRHIGHLIGHTING,OPIF_USECRC32,OPIF_USEFREESIZE,OPIF_SHORTCUT,OPIF_NONE]
--      HostFile:         string
--      CurDir:           string
--      Format:           string
--      PanelTitle:       string
--      InfoLines:        {tInfoLine*InfoLinesNumber}
--      InfoLinesNumber:  integer
--      DescrFiles:       {string*n}
--      PanelModesArray:  {tPanelMode*PanelModesNumber}
--      PanelModesNumber: integer
--      StartPanelMode:   integer
--      StartSortMode:    integer
--      StartSortOrder:   (0|1)
--      KeyBar:           {tKeyBarLabel}
--      ShortcutData:     string
--      FreeSize:         number
--  }
--  tInfoLine:{
--    Text:  string
--    Data:  string
--    Flags: [IPLFLAGS_SEPARATOR]
--  }
--  tPanelMode:{
--    ColumnTypes:        string
--    ColumnWidths:       string
--    StatusColumnTypes:  string
--    StatusColumnWidths: string
--    ColumnTitles:       {string*n}
--    Flags:              [PMFLAGS_FULLSCREEN,PMFLAGS_DETAILEDSTATUS,PMFLAGS_ALIGNEXTENSIONS,PMFLAGS_CASECONVERSION]
--  }
--  tKeyBarLabel:{
--    VirtualKeyCode:  integer
--    ControlKeyState: [CAPSLOCK_ON,ENHANCED_KEY,LEFT_ALT_PRESSED,LEFT_CTRL_PRESSED,NUMLOCK_ON,
--                      RIGHT_ALT_PRESSED,RIGHT_CTRL_PRESSED,SCROLLLOCK_ON,SHIFT_PRESSED]
--    Text:            string
--    LongText:        string
--  }
]=],
      MakeDirectory = [=[
function(object,handle,Name,OpMode) return --[[1/0/-1[,NewName:string]--]] end
--object: plugin object
--handle: panel handle
--Name:   string
--OpMode: flags=[OPM_SILENT,OPM_FIND,OPM_VIEW,OPM_QUICKVIEW,OPM_EDIT,
--                   OPM_DESCR,OPM_TOPLEVEL,OPM_PGDN,OPM_COMMANDS,OPM_NONE]
]=],
      Open = [=[
function(OpenFrom,Guid,Item) return --[[result--]] end
--result: if OpenFrom == OPEN_FROMMACRO: (string|nil|boolean|number|int64|binary)*N
--        elseif OpenFrom == OPEN_ANALYSE: -1/any type
--        else: any type
--OpenFrom: (OPEN_LEFTDISKMENU|OPEN_PLUGINSMENU|OPEN_FINDLIST|OPEN_SHORTCUT|
--           OPEN_COMMANDLINE|OPEN_EDITOR|OPEN_VIEWER|OPEN_FILEPANEL|OPEN_DIALOG|
--           OPEN_ANALYSE|OPEN_RIGHTDISKMENU|OPEN_FROMMACRO|OPEN_LUAMACRO)
--Guid:     string
--Item:     if OpenFrom == OPEN_FROMMACRO: {(string|nil|boolean|number|int64|binary)*n,n:integer}
--          elseif OpenFrom == OPEN_COMMANDLINE: string
--          elseif OpenFrom == OPEN_SHORTCUT: {
--                                              HostFile:     string
--                                              ShortcutData: string
--                                              Flags:        [FOSF_ACTIVE,FOSF_NONE]
--                                            }
--          elseif OpenFrom == OPEN_DIALOG: {hDlg: userdata}
--          elseif OpenFrom == OPEN_ANALYSE: tAnalyseInfo
--          else: integer
--  tAnalyseInfo = {
--    FileName: string (UTF-8)
--    Buffer:   string
--    OpMode:   flags=[OPM_SILENT,OPM_FIND,OPM_VIEW,OPM_QUICKVIEW,OPM_EDIT,
--                     OPM_DESCR,OPM_TOPLEVEL,OPM_PGDN,OPM_COMMANDS,OPM_NONE]
--  }
]=],
      ProcessHostFile = [=[
function(object,handle,Items,OpMode) return --[[boolean--]] end
--object: plugin object
--handle: panel handle
--Items:  {tPluginPanelItem*n}
--OpMode: flags=[OPM_SILENT,OPM_FIND,OPM_VIEW,OPM_QUICKVIEW,OPM_EDIT,
--               OPM_DESCR,OPM_TOPLEVEL,OPM_PGDN,OPM_COMMANDS,OPM_NONE]
--  tPluginPanelItem:{
--    LastWriteTime:     number(ms+01/01/1601)
--    LastAccessTime:    number(ms+01/01/1601)
--    CreationTime:      number(ms+01/01/1601)
--    ChangeTime:        number(ms+01/01/1601)
--    FileSize:          number
--    AllocationSize:    number
--    FileName:          string
--    AlternateFileName: string
--    FileAttributes:    string=[a,c,d,e,h,o,p,r,s,t]
--    Flags:             flags=(PPIF_PROCESSDESCR|PPIF_SELECTED|PPIF_NONE)
--    NumberOfLinks:     integer
--    CRC32:             integer
--    Description:       string, or nil
--    Owner:             string, or nil
--    CustomColumnData:  table, or nil
--    UserData:          any type
--  }
]=],
      ProcessPanelEvent = [=[
function(object,handle,Event,Param) return --[[boolean--]] end
--object: plugin object
--handle: panel handle
--Event:  integer=(FE_CHANGEVIEWMODE|FE_REDRAW|FE_IDLE|FE_CLOSE|FE_BREAK|
--                 FE_COMMAND|FE_KILLFOCUS|FE_GOTFOCUS|FE_CHANGESORTPARAMS)
--Param:  if Event in (FE_CHANGEVIEWMODE|FE_COMMAND) then string else nil
]=],
      ProcessPanelInput = [=[
function(object,handle,rec) return --[[boolean--]] end
--object: plugin object
--handle: panel handle
--rec:    tInputRecord: {
--                      EventType:(KEY_EVENT|MOUSE_EVENT|WINDOW_BUFFER_SIZE_EVENT|MENU_EVENT|FOCUS_EVENT),
--                      if EventType is KEY_EVENT: bKeyDown,iRepeatCount,iVirtualKeyCode,
--                                                 iVirtualScanCode,sUnicodeChar,iControlKeyState
--                      if EventType is MOUSE_EVENT: iMousePositionX,iMousePositionY,iButtonState,
--                                                   iControlKeyState,iEventFlags
--                      if EventType is WINDOW_BUFFER_SIZE_EVENT: iSizeX,iSizeY
--                      if EventType is MENU_EVENT: iCommandId
--                      if EventType is FOCUS_EVENT: bSetFocus
--        }

]=],
      PutFiles = [=[
function(object,handle,Items,Move,SrcPath,OpMode) return --[[1/2/0/-1--]] end
--object:     plugin object
--handle:     panel handle
--PanelItems: {tPluginPanelItem*n}
--Move:       boolean
--SrcPath:    string
--OpMode:     flags=[OPM_SILENT,OPM_FIND,OPM_VIEW,OPM_QUICKVIEW,OPM_EDIT,
--                   OPM_DESCR,OPM_TOPLEVEL,OPM_PGDN,OPM_COMMANDS,OPM_NONE]
--  tPluginPanelItem:{
--    LastWriteTime:      number(ms+01/01/1601)
--    LastAccessTime:     number(ms+01/01/1601)
--    CreationTime:       number(ms+01/01/1601)
--    ChangeTime:         number(ms+01/01/1601)
--    FileSize:           number
--    AllocationSize:     number
--    FileName:           string
--    AlternateFileName:  string
--    FileAttributes:     string=[a,c,d,e,h,o,p,r,s,t]
--    Flags:              flags=(PPIF_PROCESSDESCR|PPIF_SELECTED|PPIF_NONE)
--    NumberOfLinks:      integer
--    CRC32:              integer
--    Description:        string, or nil
--    Owner:              string, or nil
--    CustomColumnData:   table, or nil
--    UserData:           any type
--  }
]=],
      SetDirectory = [=[
function(object,handle,Dir,OpMode) return --[[boolean--]] end
--object: plugin object
--handle: panel handle
--Dir:    string
--OpMode: flags=[OPM_SILENT,OPM_FIND,OPM_VIEW,OPM_QUICKVIEW,OPM_EDIT,
--               OPM_DESCR,OPM_TOPLEVEL,OPM_PGDN,OPM_COMMANDS,OPM_NONE]
]=],
      SetFindList = [=[
function(object,handle,Items) return --[[boolean--]] end
--object: plugin object
--handle: panel handle
--Items:  {tPluginPanelItem*n}
--  tPluginPanelItem:{
--    LastWriteTime:      number(ms+01/01/1601)
--    LastAccessTime:     number(ms+01/01/1601)
--    CreationTime:       number(ms+01/01/1601)
--    ChangeTime:         number(ms+01/01/1601)
--    FileSize:           number
--    AllocationSize:     number
--    FileName:           string
--    AlternateFileName:  string
--    FileAttributes:     string=[a,c,d,e,h,o,p,r,s,t]
--    Flags:              flags=(PPIF_PROCESSDESCR|PPIF_SELECTED|PPIF_NONE)
--    NumberOfLinks:      integer
--    CRC32:              integer
--    Description:        string, or nil
--    Owner:              string, or nil
--    CustomColumnData:   table, or nil
--    UserData:           any type
--  }
]=],
    },
  },
}
