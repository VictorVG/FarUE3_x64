.Language=Russian,Russian (Русский)
.PluginContents=Luacheck
.Options CtrlColorChar=\
.Options CtrlStartPosChar=^
@Contents=Luacheck

v1.4.3


@Luacheck
\70 Luacheck \-│ ~В редакторе~@Editor@ │ ~Из командной строки~@Commandline@ │ ~Установка~@Install@ │ ~Конфигурация~@Config@ | ~[i]~@Index@
@=

 #Luacheck FAR scripts# — набор скриптов, обеспечивающих удобство использования #Luacheck# в фаре.

 #Luacheck#~¹~ это статический анализатор для #Lua# (а с помощью предлагаемого набора 
скриптов можно работать и с #MoonScript#).
 
 #Luacheck# позволяет обнаруживать разнообразные проблемы, такие как использование
не определённых глобальных переменных, неиспользуемые переменные и значения, доступ
к неинициализированным переменным, недостижимый код и многое другое~²~.

 Основной способ работы в фаре: ~в редакторе~@Editor@ (интерактивно), дополнительный:
~из командной строки~@Commandline@ (в том числе пакетная обработка).

@=
 #Ссылки:# 

 [#¹#] ~https://github.com/mpeterv/luacheck~@https://github.com/mpeterv/luacheck@
 [#²#] ~https://luacheck.readthedocs.io/en/stable/warnings.html~@https://luacheck.readthedocs.io/en/stable/warnings.html@
 [#*#] ~Обсуждение на форуме~@http://forum.farmanager.com/viewtopic.php?f=15&t=9650@


@Editor
 ~Luacheck~@Luacheck@ │\70 В редакторе \-│ ~Из командной строки~@Commandline@ │ ~Установка~@Install@ │ ~Конфигурация~@Config@ | ~[i]~@Index@
@=

 Для проверки содержимого в активном редакторе можно воспользоваться пунктом
~меню плагинов~@:PluginCommands@ #Luacheck#, или клавиатурной комбинацией #Ctrl-Shift-F7#.

 Найденные ошибки и предупреждения отображаются в виде списка.

 Управление:
 #Курсорные клавиши# ^позволяют перемещаться в списке между предупреждениями, соответствующим
образом будет меняться и позиция в редакторе [см. ~подробнее~@EditorMore@].
                   Точное место редактора, к которому относится предупреждение, отмечается выделением.

 Основные действия:
  #Enter#            ^перейти к позиции предупреждения
  #Esc#              закрыть список и восстановить исходную позицию

 Дополнительные действия (не закрывают список):
  #Ctrl-PgUp#        ^перейти к позиции, на которую ссылается предупреждение
(вернуться можно нажав #Ctrl-PgDn#)
  #Ctrl-Up#/#Down#     скроллировать текст редактора

 Управление расположением списка:
  #Ctrl-Home#, #Num7#  вверху
  #Ctrl-End#,  #Num1#  внизу
  #Num4#             по центру
  #F6#, #Divide#       перебор режимов
  #F5#, #Num5#         максимизация

 Действия с закладками
  #Ctrl-0..9#        ^перейти к позиции закладки 0..9
  #Ctrl-Shift-0..9#  установить закладку 0..9 в текущей позиции
  #Add#              добавить сессионную закладку с текущей позицией

 Настройка
  #F9#               ^~редактировать~@Edit.luacheckrc@ файл ~конфигурации~@Config@
  #Ctrl-F9#          открыть ~cписок файлов конфигурации~@ConfigList@


@EditorMore
#<#~назад~@Editor@
@=
 #Автопозиционирование#

 По умолчанию~*~ при переходе между предупреждениями в списке меняется и позиция
в редакторе.
 Дополнительные клавиши позволяют перемещаться в списке не затрагивая позицию редактора:

  #Shift-Up#,  #Num2#
  #Shift-Down#,#Num8#

 При этом чтобы синхронизировать позицию редактора с текущим предупреждением можно
воспользоваться #Ctrl-Enter# (или #Ctrl-Shift-Enter#).

@=
 #Примечание#

 Можно ~настроить~@OptionsEditor@, чтобы позиция редактора не следовала за курсором в списке. В этом
случае действие указанных клавиш будет инвертировано.


@Commandline
 ^~Luacheck~@Luacheck@ │ ~В редакторе~@Editor@ │\70 Из командной строки \-│ ~Установка~@Install@ │ ~Конфигурация~@Config@ | ~[i]~@Index@
@=

 Из командной строки анализ файлов запускается с помощью префикса #luacheck:#, например:

  #luacheck: *.lua#

 Отчёты выводятся в консоль.

 Синтаксис можно посмотреть запустив без параметров, а более подробно — в документации:
[~http://luacheck.readthedocs.io/en/stable/cli.html~@http://luacheck.readthedocs.io/en/stable/cli.html@]

@=
 #Примечание#

 Таким же образом можно запускать в консоли оригинальный #Luacheck# без данного пакета скриптов,
посредством #luacheck.bat#/#luacheck.exe#.

 Разница в том, что при запуске по префиксу дополнительно производятся следующие действия:
 #•# ^Загружаются специфичные для фара наборы предопределённых глобальных переменных (#far_standards.lua.cfg#)
 #•# Обеспечивается единое расположение умолчательного файла конфигурации (#.luacheckrc#)
 #•# Для вывода в цвете может запускаться #ansicon# (см. ~Установка~@Install@).


@Install
 ~Luacheck~@Luacheck@ │ ~В редакторе~@Editor@ │ ~Из командной строки~@Commandline@ │\70 Установка \-│ ~Конфигурация~@Config@ | ~[i]~@Index@
@=
 
 #1.# ^Устанавливается пакет обычным образом, путём размещения скриптов в отдельной
папке где-либо внутри #%FARPROFILE%\Macros\scripts#.

 #2.# ^Отдельно требуется установить сам модуль #luacheck#.
    Со страницы релизов [~https://github.com/mpeterv/luacheck/releases~@https://github.com/mpeterv/luacheck/releases@]
необходимо скачать исходный код (zip), извлечь из архива папку luacheck-0.xx.x\src\#luacheck#,
и поместить в #%FARPROFILE%\Macros\modules#.

 #3.# ^Опционально, для использования из командной строки через префикс #luacheck:#
требуется интерпретатор #lua# (см. ~Примечание~@InstallLua@).
    Интерпретатор (по умолчанию #luajit.exe#) должен быть доступен через #%PATH%#,
альтернативно имя/путь к нему можно задать в ~опциях~@OptionsCmdline@.
 
    ^Чтобы отчёты выводились в цвете можно где-либо в #%PATH%# разместить #ansicon#
[~http://adoxa.altervista.org/ansicon~@http://adoxa.altervista.org/ansicon/@].
    Этого не требуется, если фар запущен в #ConEmu# [~https://conemu.github.io/~@https://conemu.github.io/@].

 #4.# ^Далее необходимо изучить раздел справки ~Конфигурация~@Config@, и осуществить
начальную настройку, необходимую для корректного анализа макрофайлов FAR
(cм. ~пример~@FarConfigSetup@).


 #Настройка пакета Luacheck FAR scripts#

 В начале каждого скрипта есть таблица с опциями, которые можно изменять редактируя файл,
или используя возможности ~cfgscript~@cfgscript@.

 #•# Общие параметры

   ^#cfgpath# и #cfgname# — позволяют задать особое расположение и/или имя умолчательного
файла конфигурации.
   Если параметры не заданы, то файл #.luacheckrc# ищется в той папке, где установлен
пакет #Luacheck FAR scripts#.

 #•# Параметры, специфичные для ~luacheck_editor.lua~@OptionsEditor@

 #•# Параметры, специфичные для ~luacheck_cmdline.lua~@OptionsCmdline@


@InstallLua
#<#~назад~@Install@
@=
 #Примечание#

 Если #lua# отдельно в системе не установлен, то проще всего будет положить в папку #%FARHOME%#
файл #luajit.exe#, который можно скачать из официального репозитория:
[~https://github.com/FarGroup/FarManager/tree/master/plugins/luamacro/luasdk~@https://github.com/FarGroup/FarManager/tree/master/plugins/luamacro/luasdk@] 


 Важно: #lflua.exe#/#lfjit.exe#, которые выкладывались на форуме, НЕ ПОДОЙДУТ
для запуска Luacheck.


@OptionsEditor
#<#~Установка~@Install@
@=
 #Параметры luacheck_editor.lua#

   #filemask#  — ^вызов Luacheck будет доступен только если файл, открытый в редакторе,
соответствует заданной ~маске~@:FileMasks@ (по умолчанию #*.lua;*.moon;*.lua.cfg#).
               Значение #false# отключает проверку по маске (т.е. то же, что и #*.*#)
   #macrokey#  — клавиша, запускающая ~анализ кода~@Editor@ в редакторе.
               По умолчанию #CtrlShiftF7#, можно полностью отключить задав #false#.
   #menuitem#  — имя пункта ~меню плагинов~@:PluginCommands@ для вызова скрипта (#Luacheck#).
               Можно отключить пункт задав #false#.
   #configitem# — имя пункта ~меню конфигурации плагинов~@:PluginsConfig@, при выборе
которого будет открываться ~список файлов конфигурации~@ConfigList@.
               По умолчанию #Luacheck: edit config#, можно отключить пункт задав #false#.


 #Параметры, определяющие особенности поведения списка предупреждений#

   #AutoPos#   — ^можно отключить ~автопозионирование~@EditorMore@, задав #false#.
   #MaxHeight# — ограничивает высоту списка в неразвёрнутом состоянии, по умолчанию
#10# элементов.
   #InitPos#   — начальное положение списка предупреждений. Допустимые значения:
#Top#, #Bottom#, #Center#
   #CycleMode# — определяет последовательность циклического переключения при переборе
вариантов положения списка.
               Режим по умолчанию #ping-pong#, при изменении на #false# порядок перебора изменяется
на прямой Bottom/Center/Top/...


@OptionsCmdline
#<#~Установка~@Install@
@=
 #Параметры luacheck_cmdline.lua#

   #lua#     — ^имя интерпретатора Lua, по умолчанию #luajit.exe#.
 
   #luapath# — путь к интерпретатору, если не задан, то ищется в #%PATH%#.


@cfgscript
#<#~Установка~@Install@
@=
 #cfgscript#

 Чтобы после каждого обновления скрипта не приходилось вручную восстанавливать
изменённые значения опций рекомендуется использовать возможности #cfgscript# из пакета
#ScriptsBrowser# [~http://forum.farmanager.com/viewtopic.php?f=15&t=10418~@http://forum.farmanager.com/viewtopic.php?f=15&t=10418@]

 Пример настроек прилагается, см файл. #scriptscfg.Luacheck.ins#.


@Config
 ^~Luacheck~@Luacheck@ │ ~В редакторе~@Editor@ │ ~Из командной строки~@Commandline@ │ ~Установка~@Install@ │\70 Конфигурация \- | ~[i]~@Index@
@=

 #Конфигурация luacheck#

 Опции, управляющие анализом #luacheck#, можно задавать в файлах конфигурации #.luacheckrc#.
 Конфигурация ищется прежде всего в папке с проверяемым файлом, затем в родительских папках,
поочерёдно, вплоть до корня диска.
 Если никакой файл не найден, то используется умолчательный файл конфигурации, если существует
(расположение ~настраиваемо~@Install@).
 Пример файла конфигурации прилагается (#.luacheckrc.sample#), а полную информацию
следует искать в документации~¹~.

 Создавать/~редактировать~@Edit.luacheckrc@ конфигурацию удобно пользуясь возможностями
~списка файлов конфигурации~@ConfigList@.
 (См. ~пример~@FarConfigSetup@ #начальной# настройки конфигурации для FAR)

 Помимо конфигурационных файлов анализом удобно управлять, используя #inline#-опции~²~,
прямо в исходном коде проверяемого файла.

 Кроме того, при запуске проверки из ~командной строки~@Commandline@ опции можно указывать в виде
ключей~*~.

@=
 #Ссылки:# 

 [#¹#] ~https://luacheck.readthedocs.io/en/stable/config.html~@https://luacheck.readthedocs.io/en/stable/config.html@
 [#²#] ~https://luacheck.readthedocs.io/en/stable/inline.html~@https://luacheck.readthedocs.io/en/stable/inline.html@
 [#*#] ~https://luacheck.readthedocs.io/en/stable/cli.html~@https://luacheck.readthedocs.io/en/stable/cli.html##command-line-options@


@FarConfigSetup
#<#~Конфигурация~@Config@
@=
 #Пример начальной настройки конфигурации для FAR#

 Для задач анализа макрофайлов фара рекомендуется создать #.luacheckrc# либо в папке
#Macros\scripts#, либо в папке, куда установлен сам пакет #Luacheck FAR scripts#
(тогда он будет использоваться как #умолчательный#).


 Сделать это можно например так:

 #•# ^~Запустить~@Editor@ анализ любого макрофайла.
   Отобразится #список предупреждений#, в числе которых будут сообщения о нестандартных
глобальных идентификаторах, специфичных для FAR (#Macro#, #far#, и т.п.)
 #•# Нажать #F9#, для редактирования #активного# файла конфигурации.
   На данном этапе ещё не существует ни одного файла конфигурации, поэтому в редакторе
~открывается~@Edit.luacheckrc@ #умолчательный# ~конфиг~@Config@, пустой.
 #•# Нажать #F5#, чтобы вставить шаблон, в котором перечислены доступные параметры.
   В шаблоне все параметры закомментированы, кроме #std = "_G+luamacro"#,
именно он определяет нужный нам набор глобальных идентификаторов.
 #•# После сохранения файла и закрытия редактора соответствующие предупреждения
должны исчезнуть.


 Примечания:

 #•# ^В списке предупреждений вместо #F9# можно нажать #Сtrl-F9#, тогда
откроется ~список файлов конфигурации~@ConfigList@, где можно будет выбрать место
создания #.luacheckrc#.
 #•# #Список файлов конфигурации# также можно в любой момент открыть из меню
~конфигурации плагинов~@:PluginsConfig@, пункт #Luacheck: edit config#.


@ConfigList
 ~Luacheck~@Luacheck@ │ ~В редакторе~@Editor@ │ ~Из командной строки~@Commandline@ │ ~Установка~@Install@ │ ~Конфигурация~@Config@ | ~[i]~@Index@
@=
 \70Список файлов конфигурации\-

 Список всех файлов конфигурации в заданной ветке папок можно открыть из меню
~конфигурации плагинов~@:PluginsConfig@, или нажав комбинацию #Ctrl-F9# в
~списке предупреждений~@Editor@ #luacheck#.

 Данный список представляет собой перечень папок, в которых могут располагаться
файлы конфигурации #.luacheckrc#, от текущей папки и до корня диска.

 Пометки:
 #√# — действующий для текущего пути файл конфигурации (на нём  установлен курсор
при открытии списка).
 #+# — прочие существующие файлы конфигурации.
 #[default]# — файл конфигурации "по умолчанию".
 Отображается последним, поскольку имеет наименьший приоритет.


 #Клавиатурные команды:#

 #Enter# открывает ~файл конфигурации~@Config@ на ~редактирование~@Edit.luacheckrc@.
 Если даже в заданном месте его нет, то он будет создан после сохранения.

 #Ctrl-PgUp# переходит к указанному месту в файловой панели.
 

@Edit.luacheckrc
 ~Luacheck~@Luacheck@ │ ~В редакторе~@Editor@ │ ~Из командной строки~@Commandline@ │ ~Установка~@Install@ │ ~Конфигурация~@Config@ | ~[i]~@Index@
@=
 \70Редактирование файла конфигурации\-

 Редактор с файлом можно открывать из ~Списка файлов конфигурации~@ConfigList@ или
~списка предупреждений~@Editor@ #luacheck#.
 При этом по #F1# доступна эта справка, и если файл пустой, то по #F5# можно вставить шаблон
конфигурации, который берётся из файла #.luacheckrc.sample#.
 При закрытии изменённого файла данные проверяются, и в случае их некорректности
редактор переоткрывается. Принудительно закрыть его можно по #F10#.

 Полную информацию о доступных параметрах следует искать в документации~¹~, но
важнейшим из них является #std#, определяющий используемый набор предопределённых
имён глобальных идентификаторов.

 Помимо стандартных значений, специально для фара #far_standards.lua.cfg# определяет ещё такие наборы:
   #lflua#    — ^включает имена глобальных идентификаторов, доступные для интерпретатора #lflua#/#lfjit#~²~.
   #luafar#   — имена, доступные в lua-плагинах.
   #luamacro# — имена, доступные в макросах (самое широкое множество).

 См. также ~пример~@FarConfigSetup@ #начальной# настройки конфигурации для FAR.

@=
 #Ссылки:# 

 [#¹#] ~https://luacheck.readthedocs.io/en/stable/config.html~@https://luacheck.readthedocs.io/en/stable/config.html@
 [#²#] ~http://forum.farmanager.com/viewtopic.php?f=15&t=9821~@http://forum.farmanager.com/viewtopic.php?f=15&t=9821@


@Index
$ Индекс файла помощи #Luacheck FAR scripts#

 ~Luacheck~@Luacheck@
 │
 │
 ├─ ~Использование в редакторе~@Editor@
 │  │
 │  └─ ~Автопозиционирование~@EditorMore@
 │
 │
 ├─ ~Запуск из командной строки~@Commandline@
 │
 │
 ├─ ~Установка~@Install@
 │  │
 │  ├─ ~Интерпретатор Lua для использования с Luacheck~@InstallLua@
 │  │
 │  ├─ ~Параметры, специфичные для luacheck_editor.lua~@OptionsEditor@
 │  │
 │  ├─ ~Параметры, специфичные для luacheck_cmdline.lua~@OptionsCmdline@
 │  │
 │  └─ ~cfgscript/ScriptsBrowser~@cfgscript@ для сохранения пользовательских установок
 │
 │
 └─ ~Конфигурация~@Config@
    │
    ├─ ~Список файлов конфигурации~@ConfigList@
    │
    ├─ ~Редактирование файла конфигурации~@Edit.luacheckrc@
    │
    └─ ~Пример начальной настройки конфигурации для FAR~@FarConfigSetup@
