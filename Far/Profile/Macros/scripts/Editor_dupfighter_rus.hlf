.Language=Russian,Russian (Русский)
.PluginContents=Анти-дубликатор

@Contents

 #Область обработки:#
   Диапазон строк, содержащих выделение, или содержимое всего файла (если нет выделения).

 #Поточный блок:#
   Вся строка обрабатывается, если какая-либо часть её выделена.

 #Вертикальный блок:#
   Обрабатывается только выделенная часть строки. Действие (если таковое имеется)
будет применяться ко всей строке.

 #Понятие "дубликат":#
   Две строки считаются "дубликатами" по отношению друг к другу, если они идентичны
(или становятся таковыми после некоторого преобразования, заданного пользователем).

 #Примеры:#
   a) две строки идентичны.
   b) две строки становятся идентичными после удаления пробелов на обоих их концах.
   c) две строки начинаются с одной и той же 20-символьной последовательности.

 #Диалог:#

 ╔════════════════════════ Анти-дубликатор ════════════════════════╗
 ║                                                                 ║
 ║ (•) 1 Удалить дубликаты       [ ] Сохранять пустые строки       ║
 ║ ( ) 2 Очистить дубликаты      [ ] Показывать статистику         ║
 ║ ( ) 3 Удалить неуникальные                                      ║
 ║ ( ) 4 Очистить неуникальные                                     ║
 ║                                                                 ║
 ║ [x] Использовать выражение    [ ] Преобразовать в булевое       ║
 ║ Выражение:                                                      ║
 ║ L:lower()                                                      ↓║
 ║                                                                 ║
 ╟─────────────────────────────────────────────────────────────────╢
 ║                        { OK } [ Отмена ]                        ║
 ╚═════════════════════════════════════════════════════════════════╝

 #Опции:#
   #(•) 1 Удалить  дубликаты#    : удалить все строки, кроме первой, в каждой группе дубликатов
   #(•) 2 Очистить дубликаты#    : очистить все строки, кроме первой, в каждой группе дубликатов
   #(•) 3 Удалить  неуникальные# : удалить все строки, включая первую, в каждой группе дубликатов
   #(•) 4 Очистить неуникальные# : очистить все строки, включая первую, в каждой группе дубликатов

 #[x] Сохранять пустые строки#
   Пустые строки пропускаются (не считаются дубликатами).
   Строки, состоящие целиком из пробельных символов, также пропускаются.

 #[x] Показывать статистику#
   По окончанию обработки будут показаны некоторые статистические данные.

 #[x] Использовать выражение#
   Если опция не установлена, то две строки считаются дубликатами только если они идентичны.
   Если опция установлена, то поле #Выражение# должно содержать #Lua-выражение#, которое будет применено
к каждой выделенной строке (или ее части в случае вертикального блока) и сравниваться будут результаты вычислений
выражения, а не сами строки.

   #*# Выражения могут использовать переменную #L#, которая содержит текст обрабатываемой строки.
   #*# Если результат вычисления имеет тип string или number, то данное значение и будет использоваться при сравнении.
   #*# Если результат вычисления равен false/nil/nothing, то строка считается НЕ-ДУБЛИКАТОМ.
   #*# В прочих случаях для сравнения используется содержимое строки.

   #Примеры выражений, дающих результат типа string или number:#
     #L:lower()#
     Две строки считаются дубликатами, если они отличаются только регистром.
     #L:sub(10,20)#
     Две строки считаются дубликатами, если их подстроки [10,20] равны.
     #L:len()#
     Две строки считаются дубликатами, если они имеют одинаковую длину.
     #L:match("foobar")#
     Две строки считаются дубликатами, если они обе содержат подстроку "foobar".

 #[x] Преобразовать в булевое#
   Результат выражения преобразуется в булевое значение применением "not not X".
   При этом:
     - строка со значением false считается не-дубликатом и не участвует в сравнениях.
     - строка со значением true участвует в сравнениях.

   #Примеры выражений, пробразовываемые в булевое:#
     #L:match("foobar")#
     Строка считается дубликатом, если она содержит подстроку "foobar".
     #not L:match("foobar")#
     Строка считается дубликатом, если она не содержит подстроку "foobar".
     #L:match("foo") and L:match("bar")#
     Строка считается дубликатом, если она содержит как "foo" так и "bar".
