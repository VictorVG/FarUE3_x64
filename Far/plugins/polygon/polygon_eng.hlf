.Language=English,English
.PluginContents=Polygon
.Options CtrlColorChar=\

@Contents
$^ #Polygon - Help Contents#
 #Polygon# - a Far Manager plugin for viewing and editing SQLite database files.

 The plugin is based on SQLiteDB plugin by Artem Senichev.

 ~Reference of keyboard actions when the plugin's panel is active~@Keyboard@
 ~Custom Panel View Dialog~@PanelView@
 ~Panel Filter~@PanelFilter@
 ~Invoking the plugin~@Invoke@
 ~Configuration Dialog~@ConfigDialog@
 ~Edit/Insert Row~@EditInsertRow@
 ~Data Export Dialog~@Export@
 ~Data Dump Dialog~@Dump@
 ~User modules~@UserModules@
 ~Functions of polygon table~@PolygonTable@
 ~Misc~@Misc@

@Invoke
$^ #Invoking the plugin#
 The plugin can be invoked in the following ways:

   1. From the plugins menu. The plugin opens the file under cursor.

   2. Pressing Enter on the file in panels.

   3. From the command line: #polygon: [<options>] <filename>#
      - Options may include:
          #-u# - load user modules
          #-e# - enable extensions
          #-F# - do not honor foreign keys
        Multiple options may be passed together (e.g. #-ue#) or separate (e.g. #-u -e#).
        To turn off all options pass just #-#.
        If no options argument is passed then the options are taken from the current plugin's settings.
      - If the file <filename> does not exist it will be created.
      - If no file name is specified then an in-memory database will be opened.

   4. From ~Folder shortcuts~@:FolderShortcuts@.

   5. From a ~macro~@CallFromMacro@.


 ~Contents~@Contents@

@Keyboard
$^ #Reference of keyboard actions when the plugin's panel is active#
   View mode     │ Key         │ Action
   ──────────────┼─────────────┼───────────────────────────────────────────────────
   Any           │ F6          │ Open Editor for editing an "SQLite query"
                 │ LCtrl-1     │ Two-panel view mode
                 │ LCtrl-2     │ One-panel view mode
                 │             │
   Database      │ F3          │ Show contents of an item under cursor
                 │ F4          │ Show create statement of an item under cursor
                 │ Shift-F4    │ Show pragma statements
                 │ F5          │ Dialog: export data of an item under cursor
                 │ Ctrl-D      │ Dialog: make data dump
                 │ F8          │ Dialog: delete selected database items
                 │             │
   Table         │ F4, Enter   │ Dialog: edit a row
                 │ Shift-F4    │ Dialog: insert a row
                 │ F8          │ Dialog: delete selected rows
                 │ Ctrl-A      │ Show/hide columns affinity
                 │             │   (i=integer, t=text, b=blob, r=real, n=numeric)
                 │             │
   Table or View │ Shift-F3    │ Dialog: custom panel view mode
                 │ Shift-F5    │ Toggle panel view mode: full/custom
                 │ Ctrl-F      │ Dialog: panel filter
                 │ Ctrl-G      │ Toggle panel filter: on/off
   ──────────────┴─────────────┴───────────────────────────────────────────────────

   1. If command line has format #sql <text># then Enter will execute an SQL query <text>.
   2. If command line has format #lua <text># then Enter will execute a Lua code <text>.
      The Lua chunk will receive 2 arguments as in ~Plugin.Call(<guid>, "lua")~@CallFromMacro@.

 ~Contents~@Contents@

@PanelView
$^ #Custom panel view dialog#
   This dialog allows to choose what columns to display and set their widths.
Column widths are specified with the same syntax as in
~panel view modes~@:PanelViewModes@ dialog of Far Manager (it may be either 0,
or number of characters, or percentage of the total panel width).

   If the dialog was closed with OK button then the panel will be rearranged
according to the dialog settings. These settings will also be stored permanently
in the plugin's local database.

   Pressing Shift-F5 in the plugin panel will toggle between full and custom views.

 ~Contents~@Contents@

@PanelFilter
$^ #Panel Filter
 Panel filter allows to display only records that match the given SQL query.

 #Example:#

   ╔══════════════════ Panel Filter ════════════════════╗
   ║ #SELECT * FROM 'Personnel'#                          ║
   ║ <optional text>                                   ↓║
   ║ #WHERE#                                              ║
   ║ salary between 2000 and 3000                      ↓║
   ╟────────────────────────────────────────────────────╢
   ║                 { OK } [ Cancel ]                  ║
   ╚════════════════════════════════════════════════════╝


 ~Contents~@Contents@

@ConfigDialog
$^ #Configuration Dialog
 The following settings belong to common plugin configuration.

 #[ ] Add to plugins menu#     The plugin will appear in Plugins Menu
 #Prefix:#                     Command line prefix of the plugin

 The following settings are applied when a new database connection is created.
Changing these settings does not affect the already opened panels.

 #[ ] Load user modules#           User modules will be loaded
 #[ ] Enable extensions#           Execute #sqlite3_enable_load_extension(db,1)#
 #[ ] Do not honor foreign keys#   Do not execute #PRAGMA foreign_keys = ON#

 ~Contents~@Contents@

@UserModules
$^ #User Modules
 User module is a script in Lua programming language contained in a Lua
table and matching the following requirements:

 1. Modules are loaded from #*.lua# files that reside in
#%FARPROFILE%\PluginsData\Polygon# directory or its subdirectories.

 2. If a database file contains a table named #modules-D4BC5EA7-8229-4FFE-AAC1-5A4F51A0986A#
then modules specified in that table will be loaded too.
 - Column #script# should contain file name (either absolute or relative to database file directory).
 - Column #enabled# should be equal to 1 in order to load the script.
 - The numeric column #load_priority# affects order of loading scripts (the greater the earlier).

 3. Modules are loaded immediately after a successful connection of the plugin
to a data base is established.

 4. A module may contain all or some of the following fields referring to
functions called by the plugin in various situations:
~OnOpenConnection~@OnOpenConnection@, ~ProcessPanelEvent~@ProcessPanelEvent@,
~ProcessPanelInput~@ProcessPanelInput@ and ~ClosePanel~@ClosePanel@.

 5. A module may contain the #Priority# field (a number between 0 and 100).
If the field is not specified then it defaults to 50.
Functions of a module with higher priority are called earlier.

 6. For loading modules the #UserModule# function should be used.


 As an example the user module code looks like that:

   #local mod = { Priority=60 }#
   #mod.OnOpenConnection  = function() ... end#
   #mod.ProcessPanelEvent = function() ... end#
   #mod.ProcessPanelInput = function() ... end#
   #mod.ClosePanel        = function() ... end#
   #UserModule(mod)#


 ~Contents~@Contents@

@OnOpenConnection
$^ #OnOpenConnection
 #OnOpenConnection(info)#

 #Parameters:#
   info:   table ~tInfo~@tInfo@

 #Returns:#
   nothing

 #Description:#
   This function is called right after a connection with data base is established.


 ~User Modules~@UserModules@
 ~Contents~@Contents@

@ProcessPanelEvent
$^ #ProcessPanelEvent
 #result = ProcessPanelEvent(info, handle, event, param)#

 #Parameters:#
   info   :  table ~tInfo~@tInfo@
   handle :  panel handle
   event  :  integer
   param  :  string (for FE_CHANGEVIEWMODE and FE_COMMAND), or nil

 #Returns:#
   result :  boolean

 #Description:#
   Except for its 1-st parameter, this function is identical to export.ProcessPanelEvent function
(see LuaFAR manual).


 ~User Modules~@UserModules@
 ~Contents~@Contents@

@ProcessPanelInput
$^ #ProcessPanelInput
 #result = ProcessPanelInput (info, handle, rec)#

 #Parameters:#
   info   : table ~tInfo~@tInfo@
   handle : panel handle
   rec    : table tInputRecord

 #Returns:#
   result :  boolean

 #Description:#
   Except for its 1-st parameter, this function is identical to export.ProcessPanelInput function
(see LuaFAR manual).


 ~User Modules~@UserModules@
 ~Contents~@Contents@

@ClosePanel
$^ #ClosePanel
 #ClosePanel(info, handle)#

 #Parameters:#
   info:   table ~tInfo~@tInfo@

 #Returns:#
   nothing

 #Description:#
   Except for its 1-st parameter, this function is identical to export.ClosePanel function
(see LuaFAR manual).
   This function must not close the database connection as the plugin does that.


 ~User Modules~@UserModules@
 ~Contents~@Contents@

@tInfo
$^ #Table tInfo#
 This table has the following fields:

    #db         # : userdata : database connection (see ~LuaSQLite3~@http://lua.sqlite.org/index.cgi/doc/tip/doc/lsqlite3.wiki@ manual)
    #file_name  # : string   : name of database file
    #panel_mode # : string   : "db", "table", "view", "query"
    #curr_object# : string   : name of the current displayed object (parent directory)
    #rowid_name # : string   : name that can be used in SQL-queries as ROWID
    #get_rowid  # : function : called with 1 parameter of #tPanelItem# type
                             (see LuaFAR manual); returns an integer


 ~User Modules~@UserModules@
 ~Contents~@Contents@

@PolygonTable
$^ #Functions of polygon table#
 #polygon.debug (true|false)#
   Turns debug mode on or off.
   When debug mode is on the plugin outputs various info via #OutputDebugString()# calls.


 ~Contents~@Contents@

@EditInsertRow
$^ #Edit/Insert Row#
 This dialog allows to edit either an existing or new table row.

 Each edit field displays its contents as text, numeric, BLOB or NULL.
   - Text values are displayed like     #'some text'#
   - Numeric values are displayed like  #15#, #0.35# or #2.35e6#
   - BLOB values are displayed like     #x'13E6BC64'#
   - NULL values are displayed as       #NULL#

 To toggle a field between NULL and the initial value, press #Ctrl-N# when that field is focused.


 ~Contents~@Contents@

@CallFromMacro
$^ #Call from a macro#
 #Plugin.Call(<guid>, "open", <filename> [,<flags>])#

   Opens SQLite3 file <filename> in the active panel.
     <filename>: file name with full path.
     <flags>: string, a combination of zero or more options:
              #"u"# - load user modules
              #"e"# - enable extensions
              #"F"# - do not honor foreign keys
        If <flags> is not a string (or omitted) then
        the plugin's configuration settings are used.

 #Plugin.Call(<guid>, "lua", <whatpanel>, <Lua code>)#

   Executes the given Lua code string.
     <whatpanel> : 0 = active panel, 1 = passive panel.
                   nil can be passed for panel-unrelated code.
        If <whatpanel> specifies this plugin's open panel
        then <Lua code> will be called with 2 arguments:
            info    :  table ~tInfo~@tInfo@
            handle  :  panel handle
     <Lua code>  : Lua code in textual representation

 #Plugin.Call(<guid>, "sql", <whatpanel>, <SQL code>)#

   Executes the given SQL statements.
     <whatpanel> : 0 = active panel, 1 = passive panel
     <SQL code>  : one or more SQL statements


 ~Contents~@Contents@

@Misc
$^ #Misc#
^#Special names handling#
 Far Manager treats several directory names as special: #".."#, #"\"#, #"/"#, #""#.
 It can not properly work with a directory that has one of those names.
 Since SQLite tables can have such names the plugin passes them to Far Manager in the form of:
 #_fixed(..)#, #_fixed(\)#,  #_fixed(/)# and  #_fixed()#.
 These modified names are what the user sees in the plugin's panel but internally the plugin
knows the real names and uses them in its operations.


 ~Contents~@Contents@

@Export
$^ #Data Export Dialog#
  #Export <table name> to:#
    Specify the file to export the data to.

  #File format:#
    #(•) CSV#
        export in comma-separated values format
        #[x] Preserve line feeds#
            If checked:    preserve line feeds
            If unchecked:  replace line feeds with spaces
    #(•) Text#
        export in plain text format


 ~Contents~@Contents@

@Dump
$^ #Data Dump Dialog#
  #IMPORTANT NOTE:#
  The plugin requires #sqlite3.exe# for making dumps.
  sqlite3.exe should be placed either on the PATH or in the plugin's directory.


  #[x] Dump all#
  If checked:    make dump of the entire database.
  If unchecked:  make dump of selected items only.

  #[x] Preserve rowids#
  If checked:    preserve rowids.

  #[x] Preserve new lines#
  If checked:    new line characters are preserved and a row may span on multiple lines.
  If unchecked:  the text is encoded in such a way that every row takes only one line.


 ~Contents~@Contents@
