.Language=Russian,Russian (Русский)
.PluginContents=Polygon
.Options CtrlColorChar=\

@Contents
$^ #Polygon - Содержание справки#
 #Polygon# - Плагин для Far Manager, предназначен для просмотра
           и редактирования баз данных SQLite.

 Плагин сделан на основе плагина SQLiteDB Артёма Сеничева.

 ~Справка по действиям ключей в панели плагина~@Keyboard@ 
 ~Диалог настройки вида панели~@PanelView@
 ~Фильтр панели~@PanelFilter@
 ~Вызов плагина~@Invoke@
 ~Диалог конфигурации~@ConfigDialog@
 ~Редактирование и добавление записей таблицы~@EditInsertRow@
 ~Диалог дампа данных~@Dump@
 ~Пользовательские модули~@UserModules@
 ~Функции таблицы polygon~@PolygonTable@
 ~Разное~@Misc@

@Invoke
$^ #Вызов плагина#
 Вызов плагина можно осуществить следующими способами:

   1. Из меню плагинов. Плагин откроет файл под курсором.

   2. Нажатием Enter на файле в панелях.

   3. Из командной строки: #polygon: [<options>] <filename>#
      - Опции могут быть следующими:
          #-u# - загружать модули пользователя
          #-e# - разрешить расширения
          #-F# - не учитывать внешние ключи
        Опции можно передавать вместе, например #-ue# или отдельно, например #-u -e#.
        Для выключения всех опций передайте только #-#.
        Если нет аргумента опций, то применяются текущие установки конфигурации плагина.
      - Если файл <filename> не существует, он будет создан.
      - Если имя файла не указано, то база данных будет создана в памяти.

   4. Из ~ссылок на папки~@:FolderShortcuts@.

   5. Из ~макроса~@CallFromMacro@.

                
 ~Содержание~@Contents@

@Keyboard
$^ #Справка по действиям ключей в панели плагина#
   Режим показа     │ Ключ        │ Действие
   ─────────────────┼─────────────┼───────────────────────────────────────────────────
   Любой            │ F6          │ Редактирование "запроса SQLite" в Редакторе
                    │ LCtrl-1     │ Двухпанельный режим просмотра
                    │ LCtrl-2     │ Однопанельный режим просмотра
                    │             │
   База данных      │ F3          │ Просмотр содержимого элемента под курсором
                    │ F4          │ Просмотр запроса на создание элемента под курсором
                    │ Shift-F4    │ Просмотр прагм SQLite для базы данных
                    │ F5          │ Диалог экспорта данных для элемента под курсором
                    │ Ctrl-D      │ Диалог создания дампа данных
                    │ F8          │ Диалог удаления выделенных элементов базы данных
                    │             │
   Таблица          │ F4, Enter   │ Диалог редактирования записи под курсором
                    │ Shift-F4    │ Диалог вставки новой записи в таблицу
                    │ F8          │ Диалог удаления выделенных записей
                    │ Ctrl-A      │ Показывать/не показывать сродство колонок
                    │             │   (i=integer, t=text, b=blob, r=real, n=numeric)
                    │             │
   Таблица или View │ Shift-F3    │ Диалог настройки вида панели
                    │ Shift-F5    │ Переключение вида панели: полный/настроенный
                    │ Ctrl-F      │ Диалог фильтра панели
                    │ Ctrl-G      │ Включение/выключение фильтра панели
   ─────────────────┴─────────────┴───────────────────────────────────────────────────

   1. Если командная строка имеет вид #sql <text>#, то по нажатию Enter будет исполнен SQL-запрос <text>.
   2. Если командная строка имеет вид #lua <text>#, то по нажатию Enter будет исполнен Lua-код <text>.
      При этом Lua-коду будет передано 2 аргумента, как в ~Plugin.Call(<guid>, "lua")~@CallFromMacro@.


 ~Содержание~@Contents@

@PanelView
$^ #Диалог настройки вида панели#
   Данный диалог позволяет выбрать колонки для отображения и настроить их ширину.
Ширина колонок задаётся как в диалоге режима просмотра панелей
~Far Manager~@:PanelViewModes@.

   Если диалог был закрыт кнопкой OK, то панель перестроится в соответствии
с установками диалога. Эти установки будут также сохранены на постоянной основе
в локальной базе данных плагина.

   Нажатие Shift-F5 в панели плагина переключает режим просмотра между "полным"
и "настроенным".


 ~Содержание~@Contents@

@PanelFilter
$^ #Фильтр панели
 Фильтр панели позволяет отображать только те записи, которые соответствуют
заданному запросу SQL.

 #Пример:#

   ╔══════════════════ Фильтр панели ═══════════════════╗
   ║ SELECT * FROM "Personnel" WHERE                    ║
   ║ salary between 2000 and 3000                      ↓║
   ╟────────────────────────────────────────────────────╢
   ║                 { OK } [ Cancel ]                  ║
   ╚════════════════════════════════════════════════════╝


 ~Содержание~@Contents@

@ConfigDialog
$^ #Диалог конфигурации
 Следующие установки относятся к общей конфигурации плагина.
 
 #[ ] Добавить в меню плагинов#           Добавить пункт в меню плагинов
 #Префикс:#                               Префикс командной строки плагина

 Следующие установки применяются при создании нового подключения к базе данных.
Изменения этих установок не влияют на уже открытые панели плагина.

 #[ ] Загружать модули пользователя#      Загружать модули пользователя
 #[ ] Разрешить расширения#               Исполнять #sqlite3_enable_load_extension(db,1)#
 #[ ] Не учитывать внешние ключи#         Не исполнять #PRAGMA foreign_keys = ON#


 ~Содержание~@Contents@

@UserModules
$^ #Пользовательские модули
 Пользовательский модуль - это скрипт на языке программирования Lua,
помещённый в Lua-таблицу и отвечающий определённым требованиям:

 1. Модули загружаются из файлов #*.lua#, находящихся в папке
#%FARPROFILE%\PluginsData\Polygon# или её подпапках.

 2. Если файл базы данных содержит таблицу с именем #modules-D4BC5EA7-8229-4FFE-AAC1-5A4F51A0986A#,
то модули, указанные в данной таблице, также будут загружаться.
 - Колонка #script# должна содержать имя файла (либо абсолютное, либо относительно папки файла базы данных).
 - Колонка #active# должна быть равной 1, чтобы скрипт загружался.
 - Числовая колонка #load_priority# определяет порядок загрузки скриптов (чем больше, тем раньше).

 3. Модули загружаются сразу после установки успешного соединения плагина
с базой данных.

 4. Модуль может содержать все или некоторые из следующих полей-функций,
вызываемых плагином в различных ситуациях:
~OnOpenConnection~@OnOpenConnection@, ~ProcessPanelEvent~@ProcessPanelEvent@,
~ProcessPanelInput~@ProcessPanelInput@ и ~ClosePanel~@ClosePanel@.

 5. Модуль может содержать поле #Priority# (число от 0 до 100).
Если поле не указано, применяется значение по умолчанию 50.
Функции модулей с большим приоритетом вызываются раньше.

 6. Для загрузки модулей нужно использовать функцию #UserModule#.


 Пример структуры кода пользовательского модуля:

   #local mod = { Priority=60 }#
   #mod.OnOpenConnection  = function() ... end#
   #mod.ProcessPanelEvent = function() ... end#
   #mod.ProcessPanelInput = function() ... end#
   #mod.ClosePanel        = function() ... end#
   #UserModule(mod)#


 ~Содержание~@Contents@

@OnOpenConnection
$^ #OnOpenConnection
 #OnOpenConnection(info)#

 #Параметры:#
   info:   таблица ~tInfo~@tInfo@

 #Возвращает:#
   ничего

 #Описание:#
   Данная функция вызывается сразу после установления соединения с базой данных.


 ~Пользовательские модули~@UserModules@
 ~Содержание~@Contents@

@ProcessPanelEvent
$^ #ProcessPanelEvent
 #result = ProcessPanelEvent(info, handle, event, param)#

 #Параметры:#
   info   :  таблица ~tInfo~@tInfo@
   handle :  описатель панели
   event  :  integer
   param  :  string (для FE_CHANGEVIEWMODE и FE_COMMAND), или nil

 #Возвращает:#
   result :  boolean

 #Описание:#
   За исключением 1-го параметра функция аналогична функции export.ProcessPanelEvent
(см. мануал LuaFAR).


 ~Пользовательские модули~@UserModules@
 ~Содержание~@Contents@

@ProcessPanelInput
$^ #ProcessPanelInput
 #result = ProcessPanelInput (info, handle, rec)#

 #Параметры:#
   info   : таблица ~tInfo~@tInfo@
   handle : описатель панели
   rec    : таблица tInputRecord

 #Возвращает:#
   result :  boolean

 #Описание:#
   За исключением 1-го параметра функция аналогична функции export.ProcessPanelInput
(см. мануал LuaFAR).


 ~Пользовательские модули~@UserModules@
 ~Содержание~@Contents@

@ClosePanel
$^ #ClosePanel
 #ClosePanel(info, handle)#

 #Параметры:#
   info:   таблица ~tInfo~@tInfo@

 #Возвращает:#
   ничего

 #Описание:#
   За исключением 1-го параметра функция аналогична функции export.ClosePanel
(см. мануал LuaFAR).
 Данная функция не должна закрывать соединение с базой данных - это делает плагин.


 ~Пользовательские модули~@UserModules@
 ~Содержание~@Contents@

@tInfo
$^ #Таблица tInfo#
 Данная таблица имеет следующие поля:

    #db         # : userdata : соединение с базой данных (см. мануал ~LuaSQLite3~@http://lua.sqlite.org/index.cgi/doc/tip/doc/lsqlite3.wiki@)
    #file_name  # : string   : имя файла базы данных
    #panel_mode # : string   : "db", "table", "view", "query"
    #curr_object# : string   : имя текущего отображаемого объекта (родительской папки)
    #rowid_name # : string   : имя, которое можно использовать в SQL-запросах как ROWID
    #get_rowid  # : function : вызывается с одним параметром типа #tPanelItem#
                             (см. мануал LuaFAR); возвращает целое число


 ~Пользовательские модули~@UserModules@
 ~Содержание~@Contents@

@PolygonTable
$^ #Функции таблицы polygon#
 #polygon.debug (true|false)#
   Включает или выключает режим отладки.
   При включённом режиме отладки плагин выводит различную информацию, вызывая #OutputDebugString()#.


 ~Содержание~@Contents@

@EditInsertRow
$^ #Редактирование и добавление записей таблицы#
 Данный диалог позволяет редактировать существующую или добавленную запись таблицы.

 Каждое поле редактирования отображает содержимое как текст, число, BLOB или NULL.
   - Текстовые значения отображаются наподобие   #'some text'#
   - Числовые значения отображаются наподобие    #15#, #0.35# или #2.35e6#
   - Значения типа BLOB отображаются наподобие   #x'13E6BC64'#
   - Значения типа NULL отображаются как         #NULL#

 Для быстрого переключения поля редактирования между NULL и исходным значением,
нажмите #Ctrl-N# когда данное поле имеет фокус.


 ~Содержание~@Contents@

@CallFromMacro
$^ #Вызов из макроса#
 #Plugin.Call(<guid>, "open", <filename> [,<flags>])#

   Открывает SQLite3 файл <filename> в активной панели.
     <filename>: имя файла с полным путём.
     <flags>: строка, комбинация из 0 или более опций:
              #"u"# - загружать модули пользователя
              #"e"# - разрешить расширения
              #"F"# - не учитывать внешние ключи
        Если параметр <flags> не строкового типа или опущен,
        то применяются текущие установки конфигурации плагина.
 
 #Plugin.Call(<guid>, "lua", <whatpanel>, <Lua code>)#

   Исполняет заданную строку кода Lua.
     <whatpanel> : 0 = активная панель, 1 = пассивная панель.
                   Можно указать nil для кода, не связанного с панелями.
        Если <whatpanel> указывает на открытую панель данного плагина,
        то <Lua code> будет вызван с двумя аргументами:
            info    : таблица ~tInfo~@tInfo@
            handle  : описатель панели
     <Lua code>  : Lua-код в текстовом представлении

 #Plugin.Call(<guid>, "sql", <whatpanel>, <SQL code>)#

   Исполняет заданные запросы SQL.
     <whatpanel> : 0 = активная панель, 1 = пассивная панель.
     <SQL code>  : один или больше запросов SQL.


 ~Содержание~@Contents@

@Misc
$^ #Разное#
^#Работа со специальными именами#
 Far Manager воспринимает несколько имён папок как особые: #".."#, #"\"#, #"/"#, #""#.
 Он не может правильно обрабатывать папку, имя которой является одним из вышеперечисленных.
 Поскольку таблицы SQLite могут иметь такие имена, плагин передаёт их в Far Manager в виде:
 #_fixed(..)#, #_fixed(\)#,  #_fixed(/)# и #_fixed()#.
 Эти модифицированные имена есть то, что видит пользователь в панели плагина, однако плагин
знает настоящие имена и использует их в своих операциях.


 ~Содержание~@Contents@

@Dump
$^ #Диалог дампа данных#
  #ВАЖНОЕ ЗАМЕЧАНИЕ:#
  Для создания дампов плагину требуется #sqlite3.exe#.
  sqlite3.exe должен находиться либо на PATH, либо в папке плагина.

  
  #[x] Полный дамп#
  Отмечено:      сделать дамп всей базы данных.
  Не отмечено:   сделать дамп только выделенных элементов.

  #[x] Сохранять rowid#
  Отмечено:      сохранять rowid'ы.

  #[x] Сохранять переводы строк#
  Отмечено:      переводы строк сохраняются, и одна запись может занимать несколько строк.  
  Не отмечено:   текст кодируется таким образом, что каждая запись занимает одну строку.


 ~Содержание~@Contents@
