.Language=Russian,Russian (Русский)
.PluginContents=Polygon
.Options CtrlColorChar=\

@Contents
$^ #Polygon - Содержание справки#
 #Polygon# - Плагин для Far Manager, предназначен для просмотра
           и редактирования баз данных SQLite.

 Плагин сделан на основе плагина SQLiteDB Артёма Сеничева.

 ~Справка по действиям ключей в панели плагина~@Keyboard@ 
 ~Диалог настройки вида панели~@PanelView@
 ~Фильтр панели~@PanelFilter@
 ~Вызов плагина~@Invoke@
 ~Диалог конфигурации~@ConfigDialog@
 ~Пользовательские модули~@UserModules@

@Invoke
$^ #Вызов плагина#
 Вызов плагина можно осуществить следующими способами:

   1. Из меню плагинов. Плагин откроет файл под курсором.

   2. Нажатием Enter на файле в панелях.

   3. Из командной строки: #polygon: <filename>#
      - Если файл <filename> не существует, он будет создан.
      - Если имя файла не указано, то база данных будет создана в памяти.

   4. Из ~Ссылок на папки~@:FolderShortcuts@.

   5. Из макроса: #Plugin.Call(<guid>, "open", <filename> [,<flags>])#
      Открывает SQLite3 файл <filename> в панели.
        flags:  string, комбинация из 0 или более опций:
                  #"u"# - загружать модули пользователя
                  #"e"# - разрешить расширения
                  #"f"# - учитывать внешние ключи
                Если параметр <flags> не строкового типа (или опущен),
                то применяются текущие установки конфигурации плагина.

                
 ~Содержание~@Contents@

@Keyboard
$^ #Справка по действиям ключей в панели плагина#
   Режим показа     │ Ключ        │ Действие
   ─────────────────┼─────────────┼───────────────────────────────────────────────────
   Любой            │ F6          │ Редактирование "запроса SQLite" в Редакторе
                    │ LCtrl-1     │ Двухпанельный режим просмотра
                    │ LCtrl-2     │ Однопанельный режим просмотра
                    │             │
   База данных      │ F3          │ Просмотр содержимого таблицы под курсором
                    │ F4          │ Просмотр запроса на создание таблицы под курсором
                    │ Shift-F4    │ Просмотр прагм SQLite для базы данных
                    │ F5          │ Диалог экспорта данных для таблицы под курсором
                    │ F8          │ Диалог удаления выделенных элементов базы данных
                    │             │
   Таблица          │ F4, Enter   │ Диалог редактирования записи под курсором
                    │ Shift-F4    │ Диалог вставки новой записи в таблицу
                    │ F8          │ Диалог удаления выделенных записей
                    │             │
   Таблица или View │ Shift-F3    │ Диалог настройки вида панели
                    │ Shift-F5    │ Переключение вида панели: полный/настроенный
                    │ Ctrl-F      │ Диалог фильтра панели
                    │ Ctrl-G      │ Включение/выключение фильтра панели
   ─────────────────┴─────────────┴───────────────────────────────────────────────────

   Если командная строка не пуста, то по нажатию Enter будет исполнен
   "запрос SQLite" с командной строки.


 ~Содержание~@Contents@

@PanelView
$^ #Диалог настройки вида панели#
   Данный диалог позволяет выбрать колонки для отображения и настроить их ширину.
Ширина колонок задаётся как в диалоге режима просмотра панелей
~Far Manager~@:PanelViewModes@.

   Если диалог был закрыт кнопкой OK, то панель перестроится в соответствии
с установками диалога. Эти установки будут также сохранены на постоянной основе
в локальной базе данных плагина.

   Нажатие Shift-F5 в панели плагина переключает режим просмотра между "полным"
и "настроенным".


 ~Содержание~@Contents@

@PanelFilter
$^ #Фильтр панели
 Фильтр панели позволяет отображать только те записи, которые соответствуют
заданному запросу SQL.

 #Пример:#

   ╔══════════════════ Фильтр панели ═══════════════════╗
   ║ SELECT * FROM "Personnel" WHERE                    ║
   ║ salary between 2000 and 3000                      ↓║
   ╟────────────────────────────────────────────────────╢
   ║                 { OK } [ Cancel ]                  ║
   ╚════════════════════════════════════════════════════╝


 ~Содержание~@Contents@

@ConfigDialog
$^ #Диалог конфигурации
 Следующие установки относятся к общей конфигурации плагина.
 
 #[ ] Добавить в меню плагинов#           Добавить пункт в меню плагинов
 #Префикс:#                               Префикс командной строки плагина

 Следующие установки применяются при создании нового подключения к базе данных.
Изменения этих установок не влияют на уже открытые панели плагина.

 #[ ] Загружать модули пользователя#      Загружать модули пользователя
 #[ ] Разрешить расширения#               Исполнять #sqlite3_enable_load_extension(db,1)#
 #[ ] Учитывать внешние ключи#            Исполнять #PRAGMA foreign_keys = ON#


 ~Содержание~@Contents@

@UserModules
$^ #Пользовательские модули
 Пользовательский модуль - это скрипт на языке программирования Lua,
помещённый в Lua-таблицу и отвечающий определённым требованиям:

 1. Модули загружаются из файлов #*.lua#, находящихся в папке
#%FARPROFILE%\PluginsData\Polygon# или её подпапках.

 2. Модули загружаются сразу после установки успешного соединения плагина
с базой данных.

 3. Модуль может содержать все или некоторые из следующих полей-функций,
вызываемых плагином в различных ситуациях:
~OnOpenConnection~@OnOpenConnection@, ~ProcessPanelEvent~@ProcessPanelEvent@,
~ProcessPanelInput~@ProcessPanelInput@ и ~ClosePanel~@ClosePanel@.

 4. Модуль может содержать поле #Priority# (число от 0 до 100).
Если поле не указано, применяется значение по умолчанию 50.
Функции модулей с большим приоритетом вызываются раньше.

 5. Для загрузки модулей нужно использовать функцию #UserModule#.


 Пример структуры кода пользовательского модуля:

   #local mod = { Priority=60 }#
   #mod.OnOpenConnection  = function() ... end#
   #mod.ProcessPanelEvent = function() ... end#
   #mod.ProcessPanelInput = function() ... end#
   #mod.ClosePanel        = function() ... end#
   #UserModule(mod)#


 ~Содержание~@Contents@

@OnOpenConnection
$^ #OnOpenConnection
 #OnOpenConnection(info)#

 #Параметры:#
   info:   table ~tInfo~@tInfo@

 #Возвращает:#
   ничего

 #Описание:#
   Данная функция вызывается сразу после установления соединения с базой данных.


 ~Пользовательские модули~@UserModules@
 ~Содержание~@Contents@

@ProcessPanelEvent
$^ #ProcessPanelEvent
 #result = ProcessPanelEvent(info, handle, event, param)#

 #Параметры:#
   info   :  table ~tInfo~@tInfo@
   handle :  panel handle
   event  :  integer
   param  :  string (для FE_CHANGEVIEWMODE и FE_COMMAND), или nil

 #Возвращает:#
   result :  boolean

 #Описание:#
   За исключением 1-го параметра функция аналогична функции export.ProcessPanelEvent
(см. мануал LuaFAR).


 ~Пользовательские модули~@UserModules@
 ~Содержание~@Contents@

@ProcessPanelInput
$^ #ProcessPanelInput
 #result = ProcessPanelInput (info, handle, rec)#

 #Параметры:#
   info   : table ~tInfo~@tInfo@
   handle : panel handle
   rec    : table tInputRecord

 #Возвращает:#
   result :  boolean

 #Описание:#
   За исключением 1-го параметра функция аналогична функции export.ProcessPanelInput
(см. мануал LuaFAR).


 ~Пользовательские модули~@UserModules@
 ~Содержание~@Contents@

@ClosePanel
$^ #ClosePanel
 #ClosePanel(info, handle)#

 #Параметры:#
   info:   table ~tInfo~@tInfo@

 #Возвращает:#
   ничего

 #Описание:#
   За исключением 1-го параметра функция аналогична функции export.ClosePanel
(см. мануал LuaFAR).
 Данная функция не должна закрывать соединение с базой данных - это делает плагин.


 ~Пользовательские модули~@UserModules@
 ~Содержание~@Contents@

@tInfo
$^ #Таблица tInfo#
 Данная таблица имеет следующие поля:

    #db         # : userdata : соединение с базой данных (см. мануал ~LuaSQLite3~@http://lua.sqlite.org/index.cgi/doc/tip/doc/lsqlite3.wiki@)
    #file_name  # : string   : имя файла базы данных
    #panel_mode # : string   : "db", "table", "view", "query"
    #curr_object# : string   : имя текущего отображаемого объекта (родительской папки)
    #rowid_name # : string   : имя, которое можно использовать в SQL-запросах как ROWID
    #get_rowid  # : function : вызывается с одним параметром типа #tPanelItem#
                             (см. мануал LuaFAR); возвращает целое число


 ~Пользовательские модули~@UserModules@
 ~Содержание~@Contents@
